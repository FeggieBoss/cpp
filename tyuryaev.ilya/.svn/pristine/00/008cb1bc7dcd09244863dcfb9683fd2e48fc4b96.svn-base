#include "bmp.h"
#include <stdlib.h>

const size_t w_offset = 18;
const size_t h_offset = 22;
const size_t pixel_size_offset = 28;
const size_t image_size_offset = 34;
const size_t machine_word = 2;
const size_t bits_in_byte = 8;

int main(int argc, char **argv)
{
    if (argc != 8)
        return 0;

    FILE *in_bmp = fopen(argv[2], "rb");

    bmp_header_t header;
    fread(&header, sizeof(header), 1, in_bmp);

    fseek(in_bmp, pixel_size_offset, SEEK_SET);
    uint16_t pixel_size;
    fread(&pixel_size, machine_word, 1, in_bmp);
    pixel_size /= bits_in_byte;

    fseek(in_bmp, w_offset, SEEK_SET);
    uint32_t w;
    fread(&w, 2 * machine_word, 1, in_bmp);

    fseek(in_bmp, h_offset, SEEK_SET);
    uint32_t h;
    fread(&h, 2 * machine_word, 1, in_bmp);

    int padding = calc_padding(pixel_size, w);

    pixel_t *pixels = malloc(h * w * pixel_size * sizeof(pixel_t));
    pixel_t **pixel_matrix = malloc(h * sizeof(pixel_t *));
    for (uint32_t i = 0; i < h; ++i)
        pixel_matrix[i] = &pixels[w * sizeof(pixel_t) * i];

    load_bmp(in_bmp, header.pixel_array_offset,
             w, h, padding, pixel_matrix);

    int x = atoi(argv[4]), y = atoi(argv[5]), dx = atoi(argv[6]), dy = atoi(argv[7]);
    if (0 <= x && x < x + dx && x + dx <= (int)w && 0 <= y && y < y + dy && y + dy <= (int)h)
    {
        pixel_t *fragment = malloc(dx * dy * pixel_size * sizeof(pixel_t));
        pixel_t **fragment_matrix = malloc(dy * sizeof(pixel_t *));
        for (int i = 0; i < dy; ++i)
            fragment_matrix[i] = &fragment[dx * sizeof(pixel_t) * i];

        crop(pixel_matrix, x, (h - 1) - y, dx, dy, fragment_matrix);

        pixel_t *rev_fragment = malloc(dy * dx * pixel_size * sizeof(pixel_t));
        pixel_t **rev_fragment_matrix = malloc(dx * sizeof(pixel_t *));
        for (int i = 0; i < dx; ++i)
            rev_fragment_matrix[i] = &rev_fragment[dy * sizeof(pixel_t) * i];

        rotate(fragment_matrix, dx, dy, rev_fragment_matrix);

        FILE *out_bmp = fopen(argv[3], "wb");

        fseek(in_bmp, image_size_offset, SEEK_SET);
        uint32_t image_size;
        fread(&image_size, 2 * machine_word, 1, in_bmp);

        save_bmp(in_bmp, header, rev_fragment_matrix,
                 image_size, dy, dx, out_bmp);

        fclose(out_bmp);
        free(fragment);
        free(fragment_matrix);
        free(rev_fragment);
        free(rev_fragment_matrix);
    }

    fclose(in_bmp);
    free(pixels);
    free(pixel_matrix);
    return 0;
}