#include "bmp.h"

void load_bmp(FILE *in_bmp, size_t pixel_array_offset,
              uint32_t w, uint32_t h, int padding, pixel_t **pixel_matrix)
{
    fseek(in_bmp, pixel_array_offset, SEEK_SET);
    for (uint32_t i = 0; i < h; ++i)
    {
        for (uint32_t j = 0; j < w; ++j)
        {
            fread(&pixel_matrix[i][j], sizeof(pixel_t), 1, in_bmp);
        }
        fseek(in_bmp, padding, SEEK_CUR);
    }
}

void crop(pixel_t **pixel_matrix,
          int x, int y, int dx, int dy, pixel_t **fragment_matrix)
{
    for (int i = y - dy + 1; i <= y; ++i)
    {
        for (int j = x; j < x + dx; ++j)
        {
            int local_x = i - (y - dy + 1);
            int local_y = j - x;

            fragment_matrix[local_x][local_y] = pixel_matrix[i][j];
        }
    }
}

void rotate(pixel_t **fragment_matrix,
            int dx, int dy, pixel_t **rev_fragment_matrix)
{
    for (int i = 0; i < dy; ++i)
    {
        for (int j = 0; j < dx; ++j)
        {
            rev_fragment_matrix[(dx - 1) - j][i] = fragment_matrix[i][j];
        }
    }
}

void save_bmp(FILE *in_bmp, bmp_header_t header, pixel_t **rev_fragment_matrix,
              uint32_t old_image_size, int dx, int dy, FILE *out_bmp)
{
    int padding = calc_padding(sizeof(pixel_t), dx);
    uint32_t out_image_size = (sizeof(pixel_t) * dx + padding) * dy;
    uint32_t out_file_size = header.file_size - old_image_size + out_image_size;

    char buffer[out_file_size + 1];

    fseek(in_bmp, 0, SEEK_SET);
    fread(&buffer, 2, 1, in_bmp);
    fwrite(&buffer, 2, 1, out_bmp);

    fwrite(&out_file_size, 2 * 2, 1, out_bmp);
    fseek(in_bmp, 2 * 2, SEEK_CUR);

    fread(&buffer, 6 * 2, 1, in_bmp);
    fwrite(&buffer, 6 * 2, 1, out_bmp);

    fwrite(&dx, 2 * 2, 1, out_bmp);
    fseek(in_bmp, 2 * 2, SEEK_CUR);

    fwrite(&dy, 2 * 2, 1, out_bmp);
    fseek(in_bmp, 2 * 2, SEEK_CUR);

    fread(&buffer, 4 * 2, 1, in_bmp);
    fwrite(&buffer, 4 * 2, 1, out_bmp);

    fwrite(&out_image_size, 2 * 2, 1, out_bmp);
    fseek(in_bmp, 2 * 2, SEEK_CUR);

    fread(&buffer, 8 * 2, 1, in_bmp);
    fwrite(&buffer, 8 * 2, 1, out_bmp);

    fseek(in_bmp, 54, SEEK_SET);

    uint8_t empty = 0x00;
    for (int i = 0; i < dy; ++i)
    {
        for (int j = 0; j < dx; ++j)
        {
            fwrite(&rev_fragment_matrix[i][j], sizeof(pixel_t), 1, out_bmp);
        }

        fwrite(&empty, 1, padding, out_bmp);
    }
}
